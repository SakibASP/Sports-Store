@model IEnumerable<SportsStore.Models.ViewModels.ProductViewModel>

@{
    ViewData["Title"] = "Details";
}

<style>
    /* CSS styles for the image gallery */
    .image-gallery {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); /* Adjust the width as per your preference */
        gap: 10px; /* Add spacing between images */
    }

    /* CSS styles for the individual image items */
    .image-item {
        overflow: hidden; /* Clip the image overflow if necessary */
        border: 1px solid #ddd; /* Add a border around each image */
        padding: 10px;
    }

        .image-item img {
            max-width: 100%; /* Ensure the image doesn't exceed its container */
            height: auto; /* Maintain the aspect ratio */
        }
</style>

<h1>Details</h1>

<div>
    <h4>Product</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FirstOrDefault()!.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FirstOrDefault()!.Description)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Price)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FirstOrDefault()!.Price)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Category)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FirstOrDefault()!.Category)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model=>model.ImagePath)
        </dt>
        <dd>
            <div class="row">
                <div class="image-gallery">
                    @foreach (var i in Model)
                    {
                        if (i.ImagePath != null)
                        {
                            <div class="image-item">
                                <img src="@Url.Content(i.ImagePath)" alt="Image" />
                                <br />
                                <a asp-action="RemoveImage" asp-route-id="@i.ProductImageID" class="btn" style="color:red;">Remove</a>
                                <br />
                                <a asp-action="MakeCover" asp-route-id="@i.ProductImageID" class="btn" style="color:blue">Make Cover</a>
                            </div>
                        }
                        else
                        {
                            <p> No image </p>
                        }
                    }
                </div>
            </div>
        </dd>
    </dl>
    @*  <div class="col-sm-2">
    @foreach (var i in Model)
    {
    if (i.ImageData != null)
    {
    <img class="img-fluid" style="height:120px;width:120px;" src= "data:ImageData;base64,@System.Convert.ToBase64String(i.ImageData)" />
    <br />
    <a asp-action="RemoveImage" asp-route-id="@i.ProductImageID" class="btn" style="color:red;">Remove</a>
    <br />
    <a asp-action="MakeCover" asp-route-id="@i.ProductImageID" class="btn" style="color:blue">Make Cover</a>

    }
    else
    {
    <p> No image </p>
    }
    }
    </div> *@
</div>

<form asp-action="AddImages" enctype="multipart/form-data">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="First().ProductID" />
    <div class="form-group">
        <label asp-for="First().ImagePath" class="control-label"></label>
        <input type="file" accept="image/*" asp-for="First().ImagePath" class="form-control-file" multiple="multiple" />
        <span asp-validation-for="First().ImagePath" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="Add" class="btn btn-info" />
    </div>
</form>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}


